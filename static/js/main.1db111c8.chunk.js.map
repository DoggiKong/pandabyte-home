{"version":3,"sources":["components/common/ProjectCard.tsx","components/ProjectList.tsx","components/Home.tsx","components/AboutPage.tsx","components/Education.tsx","components/AboutMe.tsx","components/common/MenuNav.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ProjectCard","react_default","a","createElement","Card","image","undefined","this","props","header","meta","description","extra","centered","_this","className","Button","basic","color","animated","onClick","window","open","gitLink","Content","visible","Icon","name","size","hidden","disabled","demoLink","Component","ProjectList","common_ProjectCard","Container","Header","as","Grid","columns","container","stackable","Column","renderCard","Home","components_ProjectList","AboutPage","divided","Education","List","Item","AboutMe","components_AboutPage","components_Education","MenuItem","HOME","link","ABOUT","MenuNav","state","activeItem","handleItemClick","e","_ref","setState","history","push","Menu","inverted","active","withRouter","App","icon","textAlign","Image","src","width","alt","circular","bordered","react_router_dom","common_MenuNav","react_router","path","exact","component","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1db111c8.chunk.js","sourcesContent":["import React, {Component, ReactNode} from \"react\";\nimport {Button, Card, Icon} from \"semantic-ui-react\";\n\ninterface ProjectCardProps {\n    header: string;\n    meta: string;\n    description: string;\n    gitLink: string;\n    image?: string;\n    demoLink?: string;\n}\n\nclass ProjectCard extends Component<ProjectCardProps> {\n    render() {\n        return (\n            <Card\n                image={(this.props.image !== undefined) ? this.props.image : \"/images/image-placeholder.png\"}\n                header={this.props.meta}\n                meta={this.props.meta}\n                description={this.props.description}\n                extra={this.extra()}\n                centered\n            />\n        )\n    }\n\n    extra(): ReactNode {\n        return (\n            <div className='ui two buttons'>\n                <Button basic color='green' animated onClick={() => window.open(this.props.gitLink, \"_blank\")}>\n                    <Button.Content visible>\n                        <Icon name=\"github\" size=\"large\"/>\n                    </Button.Content>\n                    <Button.Content hidden>\n                        Github\n                    </Button.Content>\n                </Button>\n                <Button basic color=\"orange\" animated disabled={this.props.demoLink === undefined}\n                        onClick={() => window.open(this.props.demoLink, \"_blank\")}>\n                    <Button.Content visible>\n                        <Icon name=\"play\" size=\"large\"/>\n                    </Button.Content>\n                    <Button.Content hidden>\n                        Demo\n                    </Button.Content>\n                </Button>\n            </div>\n        )\n    }\n}\n\nexport default ProjectCard;","import React, {Component, ReactNode} from \"react\";\nimport {Container, Grid, Header, Icon, Segment} from \"semantic-ui-react\";\nimport ProjectCard from \"./common/ProjectCard\";\n\nclass ProjectList extends Component {\n    renderCard(header:string, meta:string, description:string, gitLink:string, image?:string, demoLink?:string):ReactNode {\n        return (\n            <ProjectCard\n                header={header}\n                meta={meta}\n                description={description}\n                gitLink={gitLink}\n                image={image}\n                demoLink={demoLink}/>\n        )\n    }\n\n    render() {\n        return (\n            <Container>\n                <Header as=\"h2\">\n                    <Icon name=\"book\"/>\n                    <Header.Content>\n                        Projects\n                    </Header.Content>\n                </Header>\n                <div className=\"itemList-container\">\n                    <Grid columns={3} container stackable>\n                        <Grid.Column>\n                            {this.renderCard(\"project1\",\n                                \"meta\",\n                                \"description\",\n                                \"https://google.com\",\n                            undefined,\n                            \"https://google.com\")}\n                        </Grid.Column>\n                        <Grid.Column>\n                            {this.renderCard(\"project1\",\n                                \"meta\",\n                                \"description\",\n                                \"https://google.com\")}\n                        </Grid.Column>\n                        <Grid.Column>\n                            {this.renderCard(\"project1\",\n                                \"meta\",\n                                \"description\",\n                                \"https://google.com\")}\n                        </Grid.Column>\n                    </Grid>\n                </div>\n            </Container>\n        )\n    }\n\n\n}\n\nexport default ProjectList;","import React, {Component} from \"react\";\nimport ProjectList from \"./ProjectList\";\n\nclass Home extends Component {\n    render() {\n        return (\n            <div>\n                <ProjectList/>\n            </div>\n        )\n    }\n}\n\nexport default Home;","import React, {Component} from \"react\";\nimport {Container, Grid, Header, Icon} from \"semantic-ui-react\";\n\nclass AboutPage extends Component{\n    render() {\n        return (\n            <Container>\n                <Grid columns={2} divided>\n                    <Grid.Column>\n                        <Header as=\"h2\">\n                            <Icon name=\"user\"/>\n                            <Header.Content>\n                                About Me\n                            </Header.Content>\n                        </Header>\n\n                    </Grid.Column>\n                    <Grid.Column>\n                        <Header as=\"h2\">\n                            <Icon name=\"address book\"/>\n                            <Header.Content>\n                                Contact Details\n                            </Header.Content>\n                        </Header>\n                    </Grid.Column>\n                </Grid>\n            </Container>\n        )\n    }\n}\n\nexport default AboutPage;","import React, {Component} from \"react\";\nimport {Container, Header, Icon, List} from \"semantic-ui-react\";\n\nclass Education extends Component {\n    render() {\n        return (\n            <Container>\n                <Header as=\"h2\">\n                    <Icon name=\"university\"/>\n                    <Header.Content>\n                        Education\n                    </Header.Content>\n                </Header>\n                <List>\n                    <List.Item>\n                        <List.Icon name='angle right'/>\n                        Bachelor of Engineering (Honours) (Major: Software) at University of Queensland\n                    </List.Item>\n                    <List.Item>\n                        <List.Icon name='angle right'/>\n                        International Baccalaureate (High School) at Queensland Academy for Science Mathematics and\n                        Technology\n                    </List.Item>\n                </List>\n            </Container>\n\n        )\n    }\n}\n\nexport default Education;","import React, {Component} from \"react\";\nimport AboutPage from \"./AboutPage\";\nimport Education from \"./Education\";\n\nclass AboutMe extends Component {\n    render() {\n        return (\n            <div>\n                <AboutPage/>\n                <Education/>\n            </div>\n        )\n    }\n}\n\nexport default AboutMe;","import React, {Component} from \"react\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {Menu} from \"semantic-ui-react\";\n\ninterface MenuNavState {\n    activeItem: string;\n}\n\ninterface RouterProps {\n    history?: string;\n}\n\ninterface MenuNavProps extends RouteComponentProps<RouterProps> {\n\n}\n\nconst MenuItem = {\n    HOME: {\n        name: \"Home\",\n        link: \"/\"\n    },\n    ABOUT: {\n        name: \"About\",\n        link: \"/about\"\n    }\n};\n\nclass MenuNav extends Component<MenuNavProps, MenuNavState> {\n    state = {activeItem: MenuItem.HOME.link};\n\n    handleItemClick = (e: React.MouseEvent<HTMLAnchorElement>, {name}: any) => {\n        this.setState({activeItem: name});\n        this.props.history.push(name);\n    };\n\n    render() {\n        return (\n            <Menu inverted>\n                <Menu.Item\n                    name={MenuItem.HOME.link}\n                    active={this.state.activeItem === MenuItem.HOME.link}\n                    onClick={this.handleItemClick}>\n                    {MenuItem.HOME.name}\n                </Menu.Item>\n                <Menu.Item\n                    name={MenuItem.ABOUT.link}\n                    active={this.state.activeItem === MenuItem.ABOUT.link}\n                    onClick={this.handleItemClick}>\n                    {MenuItem.ABOUT.name}\n                </Menu.Item>\n            </Menu>\n        )\n    }\n}\n\nexport default withRouter(MenuNav);","import React, {Component} from 'react';\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\nimport Home from \"./components/Home\";\nimport 'semantic-ui-css/semantic.min.css'\nimport './style/index.scss'\nimport {Container, Header, Image} from \"semantic-ui-react\";\nimport AboutMe from \"./components/AboutMe\";\nimport MenuNav from \"./components/common/MenuNav\";\n\nclass App extends Component {\n\n    render() {\n        return (\n            <div>\n                <div className=\"home-header\">\n                    <Header as=\"h2\" icon textAlign=\"center\">\n                        <Header.Content>\n                            <Image src=\"/images/myAvatar.svg\" size=\"small\" width=\"4em\" alt=\"avatar\" centered circular\n                                   bordered/>\n                        </Header.Content>\n                        <Header.Content>Jerry Wang</Header.Content>\n                        <Header.Content>(Software Engineer)</Header.Content>\n                    </Header>\n                </div>\n                <Container>\n                    <Router>\n                        <MenuNav/>\n                        <Route path=\"/\" exact component={Home}/>\n                        <Route path=\"/about\" component={AboutMe}/>\n                    </Router>\n\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}